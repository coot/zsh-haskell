#compdef cabal
#
# Author: Marcin Szamotulski
# Copyright: 2019
#
# TODO: pkgs specs of the form: pkgname:test:..
#                               pkgname:exe:...
# TODO: is there a way to handle strings in --ghc-options (multiple options)
# TODO: -f --flag
# TODO: --package-db
# TODO: --with-PROG=PATH --PROG-option --PROG-options

source "$(dirname ${0})/_ghc"

_cabal_subcommands=( bench build check clean configure "exec" \
                     fetch freeze get "gen-bounds" haddock help \
                     hscolour info init install list outdated repl \
                     report run sdist "test" unpack update upload \
                     "user-config" \
                   )

_cabal_commands () {
    local subcommands
    echo "_cabal_commands" >> /tmp/log
    subcommands=(
      "bench:Run benchmarks"
      "build:Compile targets within the project."
      "check:Check the package for common mistakes"
      "clean:Clean the package store and remove temporary files."
      "configure:Add extra project configuration."
      "exec:Give a command access to the store."
      "fetch:Downloads packages for later installation."
      "freeze:Freeze dependencies."
      "get:Download/Extract a package's source code (repository)."
      "gen-bounds:Generate dependency bounds."
      "haddock:Build Haddock documentation."
      "help:Help about commands."
      "hscolour:Generate HsColour colourised code, in HTML format."
      "info:Display detailed information about a particular package."
      "init:Create a new .cabal package file."
      "install:Install packages."
      "list:List packages matching a search string."
      "outdated:Check for outdated dependencies."
      "repl:Open an interactive session for the given component."
      "report:Upload build reports to a remote server."
      "run:Run an executable."
      "sdist:Generate a source distribution file (.tar.gz)."
      "test:Run test-suites."
      "unpack:Download/Extract a package's source code (repository)."
      "update:Updates list of known packages."
      "upload:Uploads source packages or documentation to Hackage."
      "user-config:Display and update the user's global cabal configuration."
    )
    _describe -t subcommands 'cabal subcommands' subcommands
}

_cabal_list_files () {
  # find all cabal files, but do not descent into dist-newstyle, dist or
  # .stack-work directories
  find -maxdepth 5 -name "dist-newstyle" -prune , -name "dist" -prune , -name ".stack-work" -prune , -name ".git" -prune , -type f -name "*.cabal"
}

_cabal_list_packages () {
  # find all cabal packages
  local file
  for file in $(_cabal_list_files); do
    grep '^\s*name:' $file | awk '{print $2}'
  done;
}

_cabal_list_components () {
  # find all components
  local file cmps
  for file in $(_cabal_list_files); do
    grep -P '^(test-suite|executable|benchmark|library)\s+\S' $file | awk '{print $2}' | sed -e 's/:/\\:/g'
    [[ $(grep -i "^library\s*$" ${file}) ]] && echo $(basename ${file} .cabal)" " | sed -e 's/:/\\:/g';
  done;
}

_cabal_list_libraries () {
  # find all components
  local file cmps
  for file in $(_cabal_list_files); do
    grep -P '^library\s+\S' $file | awk '{print $2}' | sed -e 's/:/\\:/g'
    [[ $(grep -i "^library\s*$" ${file}) ]] && echo $(basename ${file} .cabal)" " | sed -e 's/:/\\:/g';
  done;
}


_cabal_list_all_executables () {
  # find all executable components
  local file
  for file in $(_cabal_list_files); do
    grep -i '^\(test-suite\|executable\|benchmark\)\s\+' $file | awk '{print $2}' | sed -e 's/:/\\:/g'
  done;
}

_cabal_list_executables () {
  # find all executable components
  local file
  for file in $(_cabal_list_files); do
    grep -i '^executable\s\+' $file | awk '{print $2}' | sed -e 's/:/\\:/g'
  done;
}

_cabal_list_tests () {
  # find all components
  local file cmps
  for file in $(_cabal_list_files); do
    grep -P '^test-suite\s+\S' $file | awk '{print $2}' | sed -e 's/:/\\:/g'
  done;
}

_cabal_list_benchmarks () {
  # find all benchmarks
  local file
  for file in $(_cabal_list_files); do
    grep -i '^benchmark\s\+' $file | awk '{print $2}' | sed -e 's/:/\\:/g'
  done;
}

_cabal_components () {
  local -a components
  components=( $(_cabal_list_components) )
  _arguments "*:components:(${components})" \
             ${_cabal_build_options[@]}
              
}

# test-suites, benchmarks and executables
_cabal_all_executables () {
  local -a components
  components=( $(_cabal_list_all_executables) )
  _arguments "*:components:(${components})" \
             ${_cabal_build_options[@]}
}

# only executable components
_cabal_executables () {
  local -a components
  components=( $(_cabal_list_executables) )
  _arguments "*:components:(${components})" \
             ${_cabal_build_options[@]}
}


_cabal_tests () {
  local -a components
  components=( $(_cabal_list_tests) )
  _arguments "*:components:(${components})" \
             ${_cabal_build_options[@]}
}

_cabal_benchmarks () {
  local -a components
  components=( $(_cabal_list_benchmarks) )
  _arguments "*:components:(${components})" \
             ${_cabal_build_options[@]}
}

_cabal_packages () {
  local -a pkgs
  pkgs=( $(_cabal_list_packages ) )
  _describe -t pkgs 'packages' pkgs
}

# completion for `pkg:package-name:(libs|tests|benches|exes)`
_cabal_pkgspecs () {
  local -a pkgs
  local file name
  for file in $(_cabal_list_files); do
    name=$(basename ${file} .cabal)
    [[ $(grep -i -P '^library'    ${file}) ]] && pkgs+=("pkg:${name}:libs")
    [[ $(grep -i -P '^test-suite' ${file}) ]] && pkgs+=("pkg:${name}:tests")
    [[ $(grep -i -P '^benchmark'  ${file}) ]] && pkgs+=("pkg:${name}:benches")
    [[ $(grep -i -P '^executable' ${file}) ]] && pkgs+=("pkg:${name}:exes")
  done 
  _multi_parts ":" pkgs
}

_cabal_executable_pkgspecs () {
  local -a pkgs
  local file name
  for file in $(_cabal_list_files); do
    name=$(basename ${file} .cabal)
    [[ $(grep -i -P '^test-suite' ${file}) ]] && pkgs+=("pkg:${name}:tests")
    [[ $(grep -i -P '^benchmark'  ${file}) ]] && pkgs+=("pkg:${name}:benches")
    [[ $(grep -i -P '^executable' ${file}) ]] && pkgs+=("pkg:${name}:exes")
  done 
  _multi_parts ":" pkgs
}

_cabal_tests_pkgspecs () {
  local -a pkgs
  local file name
  for file in $(_cabal_list_files); do
    name=$(basename ${file} .cabal)
    [[ $(grep -i -P '^test-suite' ${file}) ]] && pkgs+=("pkg:${name}:tests")
  done 
  _multi_parts ":" pkgs
}

_cabal_benchmark_pkgspecs () {
  local -a pkgs
  local file name
  for file in $(_cabal_list_files); do
    name=$(basename ${file} .cabal)
    [[ $(grep -i -P '^benchmark'  ${file}) ]] && pkgs+=("pkg:${name}:benches")
  done 
  _multi_parts ":" pkgs
}
# `lib:` pkgspecs
_cabal_pkgspecs_lib () {
  local -a pkgs
  local cmp name
  for cmp in $(_cabal_list_libraries); do
    pkgs+=("lib:${cmp}")
  done 
  _multi_parts ":" pkgs
}

# `exec:` pkgspecs
_cabal_pkgspecs_exec () {
  local -a pkgs
  local cmp name
  for cmp in $(_cabal_list_executables); do
    pkgs+=("exec:${cmp}")
  done 
  _multi_parts ":" pkgs
}

# `test:` pkgsspecs
_cabal_pkgspecs_test () {
  local -a pkgs
  local cmp name
  for cmp in $(_cabal_list_tests); do
    pkgs+=("test:${cmp}")
  done 
  _multi_parts ":" pkgs
}

# `bench:` pkgspec
_cabal_pkgspecs_bench () {
  local -a pkgs
  local cmp name
  for cmp in $(_cabal_list_benchmarks); do
    pkgs+=("bench:${cmp}")
  done 
  _multi_parts ":" pkgs
}

# find all ghc which are in $PATH
_cabal_find_ghc () {
  local -a ghcs
  for p in $( echo ${PATH} | sed 's/:/\n/g' ); do
    ghcs+=( $(find $p -name "ghc*" | grep -P 'ghc(-\d+\.\d+\.\d+)?$') )
  done
  _describe -t ghcs 'ghc' ghcs
}

_cabal_build_options=( {-h,--help} \
                       {-v,--verbose=}':level:(0 1 2 3)' \
                       '--builddir:buiddir:_files -/' \
                       {-g,--ghc} \
                       '--ghcjs' \
                       '--uhc' \
                       '--haskell-suite' \
                       '--cabal-file:cabalfile:_files -g "*.cabal"' \
                       '(-w --with-compiler)'{-w,--with-compiler}':compiler:_cabal_find_ghc' \
                       '--with-hc-pkg:hcpkg:_files' \
                       '--prefix:dir:_files -/' \
                       '--binddir:dir:_files -/' \
                       '--libdir:dir:_files -/' \
                       '--libsubdir:dir:_files -/' \
                       '--dynlibdir:dir:_files -/' \
                       '--libexecdir:dir:_files -/' \
                       '--libexecsubdir:dir:_files -/' \
                       '--datadir:dir:_files -/' \
                       '--datasubdir:dir:_files -/' \
                       '--docdir:dir:_files -/' \
                       '--htmldir:dir:_files -/' \
                       '--haddockdir:dir:_files -/' \
                       '--sysconfdir:dir:_files -/' \
                       '--program-prefix' \
                       '--program-suffix' \
                       '--enable-library-vanilla' \
                       '--disable-library-vanilla' \
                       {-p,--disable-library-profiling} \
                       '--disable-library-profiling' \
                       '--enable-shared' \
                       '--disable-shared' \
                       '--enable-static' \
                       '--disable-static' \
                       '--enable-executable-dynamic' \
                       '--disable-executable-dynamic' \
                       '--enable-executable-static' \
                       '--disable-executable-static' \
                       '--enable-profiling' \
                       '--disable-profiling' \
                       '--enable-executable-profiling' \
                       '--disable-executable-profiling' \
                       '--profiling-detail:detail:(default none exported-functions all-functions)' \
                       '--library-profiling-detail:detail:(default none exported-functions all-functions)' \
                       {-O-,--enable-optimization=}':level:(0 1 2)' \
                       '--disable-optimisation' \
                       '--enable-debug-info:(0 1 2 3)' \
                       '--disable-debug-info' \
                       '--enable-library-for-ghci' \
                       '--disable-library-for-ghci' \
                       '--enable-split-sections' \
                       '--disable-split-sections' \
                       '--enable-split-objs' \
                       '--disable-split-objs' \
                       '--enable-executable-stripping' \
                       '--disable-executable-stripping' \
                       '--enable-library-stripping' \
                       '--disable-library-stripping' \
                       '--configure-option::_guard ".*" ""' \
                       '--user' \
                       '--global' \
                       '--package-db' \
                       {-f,--flags} \
                       '--extra-lib-dirs:path:_files -/' \
                       '--enable-deterministic' \
                       '--disable-deterministic' \
                       '--ipid' \
                       '--cid' \
                       '--extra-lib-dirs:extralib:_files -/' \
                       '--extra-framework-dirs:path:_files -/' \
                       '--extra-prog-path:path:_files -/' \
                       '--instantiate-with' \
                       '--enable-tests' \
                       '--disable-tests' \
                       '--enable-coverage' \
                       '--disable-coverage' \
                       '--enable-library-coverage' \
                       '--disable-library-coverage' \
                       '--enable-benchmarks' \
                       '--disable-benchmarks' \
                       '--enable-relocatable' \
                       '--disable-relocatable' \
                       '--disable-response-files' \
                       '--allow-depending-on-private-libs' \
                       '--cabal-lib-version' \
                       '--constraint' \
                       '--preference' \
                       '--solver' \
                       '--allow-older' \
                       '--allow-newer' \
                       '--write-ghc-environment-files::(always never ghc8.4.4+)' \
                       '--enable-documentation' \
                       '--disable-documentation' \
                       '--doc-index-file=TEMPLATE' \
                       '--dry-run' \
                       '--max-backjumps:max backjumps:_guard "\d\+" "max backjumps"' \
                       '--reorder-goals' \
                       '--count-conflicts' \
                       '--minimize-conflict-set' \
                       '--independent-goals' \
                       '--shadow-installed-packages' \
                       '--strong-flags' \
                       '--allow-boot-library-installs' \
                       '--reject-unconstrained-dependencies::(none all)' \
                       '--reinstall' \
                       '--avoid-reinstalls' \
                       '--force-reinstalls' \
                       '--upgrade-dependencies' \
                       '--only-dependencies' \
                       '--dependencies-only \
                       ''--index-state' \
                       '--root-cmd::_files' \
                       '--symlink-bindir::_files -/' \
                       '--build-summary' \
                       '--build-log' \
                       '--remote-build-reporting' \
                       '--report-planning-failure' \
                       '--enable-per-component' \
                       '--disable-per-component' \
                       '--one-shot' \
                       '--run-tests' \
                       {-j,--jobs}':number of jobs:' \
                       '--keep-going' \
                       '--offline' \
                       '--project-file::_files' \
                       '--haddock-hoogle' \
                       '--haddock-html' \
                       '--haddock-html-location=URL' \
                       '--haddock-for-hackage' \
                       '--haddock-executables' \
                       '--haddock-tests' \
                       '--haddock-benchmarks' \
                       '--haddock-all' \
                       '--haddock-internal' \
                       '--haddock-css::_files' \
                       '--haddock-hyperlink-source' \
                       '--haddock-quickjump' \
                       '--haddock-hscolour-css::_files' \
                       '--haddock-contents-location' \
                       '--test-log' \
                       '--test-machine-log' \
                       '--test-show-details' \
                       '--test-keep-tix-files' \
                       '--test-wrapper::_files' \
                       '--test-fail-when-no-test-suites' \
                       '--test-options' \
                       '--test-option' \
                       '--only-configure' \
                       '--ghc-option:ghc option:_ghc' \
                       '--ghc-options:ghc options:_ghc' \
                     )

_cabal_subcommand () {
  local subcommands
  _arguments "*:subcommand:(${_cabal_subcommands})"
}

_cabal () {
  local context state state_descr line word current_word
  local subcommand=""
  current_word=$words[$CURRENT]
  typeset -A opt_args
  for word in $words; do
    if [[ -n ${word:*_cabal_subcommands} ]];then
      subcommand=$word
      break
    fi
  done
  case ${subcommand:+subcommand_}"args" in
    args)
      # handle subcommands and global options"
      _arguments ':subcommand:_cabal_subcommand' \
                  {-v,--version} \
                  '--numeric-version' \
                  '--config-file:cabal config file:_files' \
                  '--sandbox-config-file:sandbox config file:_files' \
                  '--defalt-user-config:user cabal config file:_files' \
                  '--require-sandbox' \
                  '--no-require-sandbox' \
                  '--ignore-sandbox' \
                  '--ignore-expiry' \
                  '--http-transport::_guard ".*" ""' \
                  '--enable-nix' \
                  '--disable-nix' \
                  '--remote-repo::_guard ".*" ""' \
                  '--remote-repo-cache:cache directory for remote repos:_files -/' \
                  '--local-repo::_files -/' \
                  {--logs-dir,--logsdir}':log directory:_files -/' \
                  '--world-file::_files' \
                  {--store-dir,--storedir}':store directory:_files -/'
    ;;
    subcommand_args)
      # handle subcommand arguments and options
      case ${subcommand} in
        build)
          if [[ ${current_word:0:4} == "pkg:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs'
          elif [[ ${current_word:0:4} == "lib:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_lib'
          elif [[ ${current_word:0:5} == "test:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_test'
          elif [[ ${current_word:0:5} == "exec:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_exec'
          elif [[ ${current_word:0:6} == "bench:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_bench'
          else
            _alternative 'cmps:components:_cabal_components'
          fi
        ;;
        test)
          if [[ ${current_word:0:4} == "pkg:" ]]; then
            _arguments '*:pkgspec:_cabal_tests_pkgspecs'
          elif [[ ${current_word:0:4} == "lib:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_lib'
          elif [[ ${current_word:0:5} == "test:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_test'
          elif [[ ${current_word:0:5} == "exec:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_exec'
          elif [[ ${current_word:0:6} == "bench:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_bench'
          else
            _alternative 'cmps:components:_cabal_tests'
          fi
        ;;
        repl)
          if [[ ${current_word:0:4} == "pkg:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs'
          elif [[ ${current_word:0:4} == "lib:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_lib'
          elif [[ ${current_word:0:5} == "test:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_test'
          elif [[ ${current_word:0:5} == "exec:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_exec'
          elif [[ ${current_word:0:6} == "bench:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_bench'
          else
            _alternative 'cmps:components:_cabal_components'
          fi
        ;;
        run)
          if [[ ${current_word:0:4} == "pkg:" ]]; then
            _arguments '*:pkgspec:_cabal_executable_pkgspecs'
          elif [[ ${current_word:0:5} == "test:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_test'
          elif [[ ${current_word:0:5} == "exec:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_exec'
          elif [[ ${current_word:0:6} == "bench:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_bench'
          else
            _alternative 'cmps:components:_cabal_all_executables'
          fi
        ;;
        bench)
          if [[ ${current_word:0:4} == "pkg:" ]]; then
            _arguments '*:pkgspec:_cabal_benchmark_pkgspecs'
          elif [[ ${current_word:0:6} == "bench:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_bench'
          else
            _alternative 'cmps:components:_cabal_benchmarks'
          fi
        ;;
        exec)
          if [[ ${current_word:0:4} == "pkg:" ]]; then
            _arguments '*:pkgspec:_cabal_executable_pkgspecs'
          elif [[ ${current_word:0:4} == "lib:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_lib'
          elif [[ ${current_word:0:5} == "test:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_test'
          elif [[ ${current_word:0:5} == "exec:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_exec'
          elif [[ ${current_word:0:6} == "bench:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_bench'
          else
            _alternative 'cmps:components:_cabal_all_executables'
          fi
        ;;
        update)
          _alternative 'cmps:components:_cabal_executables' \
                       'pkg:pkgspec:_cabal_executable_pkgspecs'
        ;;
        configure)
          _arguments "1:packages:_cabal_packages" \
                     ${_cabal_build_options[@]}
        ;;
        haddock)
          if [[ ${current_word:0:4} == "pkg:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs'
          elif [[ ${current_word:0:4} == "lib:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_lib'
          elif [[ ${current_word:0:5} == "test:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_test'
          elif [[ ${current_word:0:5} == "exec:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_exec'
          elif [[ ${current_word:0:6} == "bench:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_bench'
          else
            _alternative 'cmps:components:_cabal_components'
          fi
        ;;
        install)
          if [[ ${current_word:0:4} == "pkg:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs'
          elif [[ ${current_word:0:4} == "lib:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_lib'
          elif [[ ${current_word:0:5} == "test:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_test'
          elif [[ ${current_word:0:5} == "exec:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_exec'
          elif [[ ${current_word:0:6} == "bench:" ]]; then
            _arguments '*:pkgspec:_cabal_pkgspecs_bench'
          else
            _alternative 'cmps:components:_cabal_components'
          fi
        ;;
        sdist)
          _arguments {-h,--help} \
                     {-v,--verbose=}':level:(0 1 2 3)' \
                     '--builddir:buiddir:_files -/' \
                     '--project-file:projectfile:_files' \
                     {-l,--list-only} \
                     {-z,--null-sep} \
                     {-o,--output-dir}':outputdir:_files -/'
        ;;
        upload)
          _arguments {-h,--help} \
                     {-v,--verbose=}':level:(0 1 2 3)' \
                     '--publish' \
                     {-d,--documentation} \
                     {-u,--username} \
                     {-p,--password} \
                     {-P,--password-command} \
                     '1:targiles:_files'
        ;;
        init)
          _arguments {-h,--help} \
                     {-v,--verbose=}':level:(0 1 2 3)' \
                     {-i,--interactive} \
                     {-n,--non-interactive} \
                     {-q,--quite} \
                     {-m,--minimal} \
                     '--overwrite' \
                     '--package-dir:package directory:_files -/' \
                     {-p,--package-name} \
                     '--version' \
                     '--cabal-version' \
                     {-l,--license} \
                     {-a,--author} \
                     {-e,--email} \
                     {-u,--homepage} \
                     {-s,--synopsis} \
                     {-c,--category} \
                     {-x,--extra-source-file}':extra source file:_files' \
                     {--lib,--exe,--libandexe,--tests} \
                     '--test-dir:test dir:_files -/' \
                     '--simple' \
                     '--main-is:main file:_files' \
                     '--language' \
                     {-o,--expose-module} \
                     '--extension' \
                     {-d,--dependency} \
                     '--application-dir:application dir:_files -/' \
                     '--source-dir:source dir:_files -/' \
                     '--build-tool' \
                     '(-w --with-compiler)'{-w,--with-compiler}':compiler:_cabal_find_ghc' \

        ;;
        outdated)
          _arguments {-h,--help} \
                     {-v,--verbose=}':level:(0 1 2 3)' \
                     '--freeze-file' \
                     '--project-file:project file:_files' \
                     '--simple-output' \
                     '--exit-code' \
                     {-q,--quiet} \
                     '--ignore' \
                     '--minor'
        ;;
      esac
  esac
}

compdef _cabal cabal

# vim:ft=zsh:expandtab
